/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dao;

import entities.Question;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Classe pour passer de l'espace objet à l'espace relationnel. implémente le
 * CRUD sur la table person en utilisant l'entité Person
 *
 * @author Guillaume Rostagnat
 */
public class QuestionDAO {

    private final Connection connection;

    public QuestionDAO() {

        connection = MariadbConnection.getInstance();
    }

    // Lecture de la BDD
    public Question read(Integer id) {
        Question obj = null;

        // Envoyer requêtes
        String sql = ("SELECT * FROM question WHERE id_qa=?;");
        try {
            PreparedStatement pstmt = connection.prepareStatement(sql);
            // Remplace le ? dans la requête 
            pstmt.setInt(1, id);
            // Récupérer les résultats
            ResultSet result = pstmt.executeQuery();
            // si  premier résultat
            if (result.first()) {
                obj = new Question();
                obj.setId_qa(result.getInt(1));
                obj.setQuestion(result.getString(2));
                obj.setAnswer(result.getString(3));

            }

        } catch (SQLException ex) {
            Logger.getLogger(QuestionDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return obj;

    }
    // CREER Question

    public void create(Question obj) {
        String sql = "INSERT INTO question (question, answer)"
                + "VALUES (?,?)";
        try {
            PreparedStatement pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            // Remplace le ? dans la requête
            pstmt.setString(1, obj.getQuestion());
            pstmt.setString(2, obj.getAnswer());
            int nbLines = pstmt.executeUpdate(); // Retourne nombre de lignes impactées par la requête
            // Si j'ai une ligne injéctée je récupère l'id qa
            if (nbLines == 1) {
                // Je récupère un tableau de résultat
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                autoGeneratedKeys.first();
                // Je vais sur la premiere ligne
                int id = autoGeneratedKeys.getInt(1);
                // Je récupère l'entier sur la première colonne
                obj.setId_qa(id);
            }
        } catch (SQLException ex) {
            Logger.getLogger(QuestionDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Modifier
    public void update(Question obj) {

        String sql = "UPDATE question SET question=?, answer=?"
                + "WHERE id_qa=?";
        try {
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setString(1, obj.getQuestion());
            pstmt.setString(2, obj.getAnswer());
            pstmt.setInt(3, obj.getId_qa());

            pstmt.executeUpdate();

        } catch (SQLException ex) {
            System.err.println("erreur lors de l'update: " + ex.getMessage());
        }

    }

    // Supprimer
    public void delete(Integer id) {
        String sql = "DELETE FROM question WHERE id_qa=?";

        try {
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setInt(1, id);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.err.println("erreur lors du delete: " + ex.getMessage());
        }

    }

    //Compter
    public int count() {
        int count = 0;
        String sql = "SELECT COUNT(*) AS c FROM person";
        try {
            PreparedStatement pstmt = connection.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                count = rs.getInt("c");
            }
        } catch (SQLException ex) {
            System.err.println("erreur lors du count: " + ex.getMessage());
        }
        return count;

    }

    // TOUT AFFICHER
    public Collection<Question> list() {
        ArrayList<Question> list = new ArrayList<>();
        String sql = "SELECT * FROM person";
        try {
            PreparedStatement pstmt = connection.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Question q = new Question();
                q.setId_qa(rs.getInt("id_qa"));
                q.setQuestion(rs.getString("question"));
                q.setQuestion(rs.getString("answer"));
                list.add(q);

            }
        } catch (SQLException ex) {
            System.err.println("erreur lors du Listage: " + ex.getMessage());
        }
        return list;

    }
}
